//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ctftcConverter.serviceadd {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="serviceadd.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/stc", ReplyAction="*")]
        double stc(double ct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/stc", ReplyAction="*")]
        System.Threading.Tasks.Task<double> stcAsync(double ct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/stf", ReplyAction="*")]
        double stf(double tf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/stf", ReplyAction="*")]
        System.Threading.Tasks.Task<double> stfAsync(double tf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sadd", ReplyAction="*")]
        double sadd(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sadd", ReplyAction="*")]
        System.Threading.Tasks.Task<double> saddAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ssub", ReplyAction="*")]
        double ssub(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ssub", ReplyAction="*")]
        System.Threading.Tasks.Task<double> ssubAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/smul", ReplyAction="*")]
        double smul(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/smul", ReplyAction="*")]
        System.Threading.Tasks.Task<double> smulAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sdiv", ReplyAction="*")]
        double sdiv(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sdiv", ReplyAction="*")]
        System.Threading.Tasks.Task<double> sdivAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/smod", ReplyAction="*")]
        double smod(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/smod", ReplyAction="*")]
        System.Threading.Tasks.Task<double> smodAsync(double num1, double num2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : ctftcConverter.serviceadd.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<ctftcConverter.serviceadd.WebService1Soap>, ctftcConverter.serviceadd.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double stc(double ct) {
            return base.Channel.stc(ct);
        }
        
        public System.Threading.Tasks.Task<double> stcAsync(double ct) {
            return base.Channel.stcAsync(ct);
        }
        
        public double stf(double tf) {
            return base.Channel.stf(tf);
        }
        
        public System.Threading.Tasks.Task<double> stfAsync(double tf) {
            return base.Channel.stfAsync(tf);
        }
        
        public double sadd(double num1, double num2) {
            return base.Channel.sadd(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> saddAsync(double num1, double num2) {
            return base.Channel.saddAsync(num1, num2);
        }
        
        public double ssub(double num1, double num2) {
            return base.Channel.ssub(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> ssubAsync(double num1, double num2) {
            return base.Channel.ssubAsync(num1, num2);
        }
        
        public double smul(double num1, double num2) {
            return base.Channel.smul(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> smulAsync(double num1, double num2) {
            return base.Channel.smulAsync(num1, num2);
        }
        
        public double sdiv(double num1, double num2) {
            return base.Channel.sdiv(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> sdivAsync(double num1, double num2) {
            return base.Channel.sdivAsync(num1, num2);
        }
        
        public double smod(double num1, double num2) {
            return base.Channel.smod(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> smodAsync(double num1, double num2) {
            return base.Channel.smodAsync(num1, num2);
        }
    }
}
